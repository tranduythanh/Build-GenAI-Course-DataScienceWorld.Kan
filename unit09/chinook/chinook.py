import streamlit as st
from langchain_openai import ChatOpenAI
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.utilities import SQLDatabase
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool
import os
from dotenv import load_dotenv
import logging
import re

# C·∫•u h√¨nh logging v·ªõi ƒë·ªãnh d·∫°ng chi ti·∫øt
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def clean_sql_query(query: str) -> str:
    """
    L√†m s·∫°ch v√† tr√≠ch xu·∫•t truy v·∫•n SQL t·ª´ ph·∫£n h·ªìi c·ªßa LLM.
    Lo·∫°i b·ªè ƒë·ªãnh d·∫°ng markdown, d·∫•u backticks v√† b·∫•t k·ª≥ vƒÉn b·∫£n kh√¥ng ph·∫£i SQL n√†o.
    """
    logger.info("="*50)
    logger.info("Raw query before cleaning:")
    logger.info(query)
    logger.info("="*50)
    
    # Lo·∫°i b·ªè c√°c kh·ªëi m√£ markdown
    query = re.sub(r'```sql|```', '', query)
    
    # Lo·∫°i b·ªè b·∫•t k·ª≥ vƒÉn b·∫£n n√†o tr∆∞·ªõc SELECT ƒë·∫ßu ti√™n (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
    query = re.sub(r'^.*?(?=SELECT)', '', query, flags=re.IGNORECASE)
    
    # Lo·∫°i b·ªè b·∫•t k·ª≥ vƒÉn b·∫£n n√†o sau d·∫•u ch·∫•m ph·∫©y cu·ªëi c√πng
    query = re.sub(r';.*$', ';', query)
    
    # Lo·∫°i b·ªè c√°c c√¢u l·ªánh action ho·∫∑c checker
    query = re.sub(r'Action:.*$', '', query, flags=re.DOTALL)
    query = re.sub(r'Action Input:.*$', '', query, flags=re.DOTALL)
    query = re.sub(r'Now, I will.*$', '', query, flags=re.DOTALL)
    query = re.sub(r'It seems that.*$', '', query, flags=re.DOTALL)
    
    # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu/cu·ªëi
    query = query.strip()
    
    logger.info("Cleaned query:")
    logger.info(query)
    logger.info("="*50)
    
    return query

class CleanSQLDatabaseToolkit(SQLDatabaseToolkit):
    def get_tools(self):
        """L·∫•y c√°c c√¥ng c·ª• trong toolkit."""
        query_tool = QuerySQLDataBaseTool(
            db=self.db,
            clean_query_fn=clean_sql_query
        )
        return [query_tool]

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# In c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ debug
logger.info("Environment Variables:")
for key, value in os.environ.items():
    if "OPENAI" in key or "API" in key:  # Ch·ªâ in c√°c bi·∫øn m√¥i tr∆∞·ªùng li√™n quan
        logger.info(f"{key}: {value}")

# Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc
if not os.getenv("OPENAI_API_KEY"):
    st.error("Vui l√≤ng c√†i ƒë·∫∑t kh√≥a API OpenAI trong file .env")
    st.stop()

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="Tr·ª£ l√Ω C∆° s·ªü d·ªØ li·ªáu Chinook",
    page_icon="üéµ",
    layout="centered"
)

# Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n cho agent v√† LLM
if 'agent_executor' not in st.session_state:
    try:
        # K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu Chinook.db
        db = SQLDatabase.from_uri("sqlite:///Chinook.db")
        
        # T·∫£i m√¥ h√¨nh ng√¥n ng·ªØ GPT-4
        llm = ChatOpenAI(
            temperature=0,
            model_name="gpt-4o-mini",
            verbose=True
        )
        
        # Chu·∫©n b·ªã b·ªô c√¥ng c·ª• v·ªõi custom toolkit
        toolkit = CleanSQLDatabaseToolkit(db=db, llm=llm)
        
        # T·∫°o agent v·ªõi custom system message
        system_message = """You are an expert SQL developer (SQLite). When given a question, you should:
        1. Think about the question carefully
        2. Write a SQL query to answer the question
        3. Return ONLY the SQL query, without any markdown formatting, explanations, or additional text
        """
        
        # T·∫°o agent v·ªõi verbose logging
        st.session_state.agent_executor = create_sql_agent(
            llm=llm,
            toolkit=toolkit,
            verbose=True,
            system_message=system_message,
            handle_parsing_errors=True,
            return_intermediate_steps=True
        )
        
        # L∆∞u LLM v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng cho vi·ªác d·ªãch
        st.session_state.llm = llm
    except Exception as e:
        st.error(f"L·ªói khi kh·ªüi t·∫°o k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu: {str(e)}")
        st.stop()

# C√°c th√†nh ph·∫ßn giao di·ªán ng∆∞·ªùi d√πng
st.title("üéµ Tr·ª£ l√Ω C∆° s·ªü d·ªØ li·ªáu Chinook")
st.markdown("""
    H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ c·ª≠a h√†ng nh·∫°c! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m th√¥ng tin v·ªÅ:
    - Kh√°ch h√†ng v√† c√°c giao d·ªãch mua h√†ng
    - Ngh·ªá sƒ© v√† album
    - B√†i h√°t v√† th·ªÉ lo·∫°i
    - Doanh s·ªë v√† h√≥a ƒë∆°n
""")

# Th√™m √¥ nh·∫≠p vƒÉn b·∫£n cho c√¢u h·ªèi
question = st.text_input(
    "B·∫°n mu·ªën bi·∫øt ƒëi·ªÅu g√¨?",
    placeholder="V√≠ d·ª•: Kh√°ch h√†ng n√†o ƒë√£ chi ti√™u nhi·ªÅu ti·ªÅn nh·∫•t?"
)

# Th√™m n√∫t g·ª≠i
submit_button = st.button("H·ªèi")

# X·ª≠ l√Ω c√¢u h·ªèi khi ƒë∆∞·ª£c g·ª≠i
if submit_button and question:
    try:
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            # D·ªãch c√¢u h·ªèi sang ti·∫øng Anh
            translation_prompt = f"""
            Translate the following Vietnamese question to English. 
            Only return the English translation, nothing else.
            Question: {question}
            """
            logger.info("Translating question to English...")
            english_question = st.session_state.llm.invoke(translation_prompt).content
            logger.info(f"Translated question: {english_question}")
            
            # Hi·ªÉn th·ªã c√¢u h·ªèi ƒë√£ d·ªãch
            st.info(f"ƒê√£ d·ªãch c√¢u h·ªèi: {english_question}")
            
            # Th·ª±c thi truy v·∫•n SQL v·ªõi logging
            logger.info("="*50)
            logger.info("Starting SQL query execution...")
            logger.info(f"Original question: {english_question}")
            
            # L·∫•y c·∫£ ph·∫£n h·ªìi cu·ªëi c√πng v√† c√°c b∆∞·ªõc trung gian
            result = st.session_state.agent_executor.invoke({"input": english_question})
            raw_response = result["output"]
            
            # Ghi log c√°c b∆∞·ªõc trung gian
            logger.info("\nIntermediate Steps:")
            for step in result.get("intermediate_steps", []):
                action = step[0]
                observation = step[1]
                logger.info(f"Action: {action.tool}")
                logger.info(f"Action Input: {action.tool_input}")
                logger.info(f"Observation: {observation}")
                logger.info("-"*50)
            
            logger.info("Final response:")
            logger.info(raw_response)
            logger.info("="*50)
            
            response = raw_response
            
            # D·ªãch c√¢u tr·∫£ l·ªùi sang ti·∫øng Vi·ªát
            translation_prompt = f"""
            Translate the following English answer to Vietnamese. 
            DO NOT translate any proper nouns, names, song titles, album names, or artist names.
            Keep all numbers, dates, and technical terms in their original form.
            Only return the Vietnamese translation, nothing else.
            Answer: {response}
            """
            vietnamese_response = st.session_state.llm.invoke(translation_prompt).content
            
            st.success("ƒê√¢y l√† k·∫øt qu·∫£ t√¥i t√¨m ƒë∆∞·ª£c:")
            st.write(vietnamese_response)
    except Exception as e:
        logger.error(f"Error processing question: {str(e)}")
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}")

# Th√™m c√°c c√¢u h·ªèi m·∫´u
with st.expander("C√¢u h·ªèi m·∫´u"):
    st.markdown("""
    H√£y th·ª≠ h·ªèi nh·ªØng c√¢u nh∆∞:
    - Ngh·ªá sƒ© n√†o c√≥ nhi·ªÅu album nh·∫•t?
    - 5 th·ªÉ lo·∫°i nh·∫°c b√°n ch·∫°y nh·∫•t l√† g√¨?
    - Kh√°ch h√†ng n√†o ƒë√£ chi ti√™u nhi·ªÅu ti·ªÅn nh·∫•t trong nƒÉm 2013?
    - C√≥ bao nhi√™u b√†i h√°t thu·ªôc th·ªÉ lo·∫°i Rock?
    - Li·ªát k√™ t·∫•t c·∫£ c√°c album c·ªßa m·ªôt ngh·ªá sƒ© c·ª• th·ªÉ
    """)

# Th√™m ch√¢n trang
st.markdown("---")
st.markdown("ƒê∆∞·ª£c t·∫°o b·∫±ng ‚ù§Ô∏è s·ª≠ d·ª•ng Streamlit, LangChain v√† OpenAI") 